#This SQL project uses a digital media store database to query for store statistics.

#1.Show Customers (their full names, customer ID, and country) who are not in the US.
SELECT 
CustomerId, 
FirstName, 
LastName, 
Country
FROM chinook.customers
WHERE country <> 'USA';

#2.Show only the Customers from Brazil.
SELECT *
FROM chinook.customers
WHERE country = 'Brazil';

#3.Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT 
FirstName, 
LastName, 
InvoiceId, 
InvoiceDate, 
BillingCountry
FROM chinook.invoices as inv
LEFT JOIN chinook.customers as cust
on cust.CustomerId = inv.CustomerId
WHERE inv.BillingCountry = 'Brazil';

#4.Show the Employees who are Sales Agents.
SELECT * 
FROM chinook.Employees
WHERE Title = "Sales Support Agent";

#5.Find a unique/distinct list of billing countries from the Invoice table.
SELECT distinct BillingCountry
FROM chinook.invoices;

#6.Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT 
emp.FirstName, 
emp.LastName, 
inv.InvoiceId
FROM chinook.invoices as inv
JOIN chinook.customers as cust
on cust.CustomerId = inv.CustomerId
JOIN chinook.employees as emp
on emp.EmployeeId = cust.SupportRepId;

#7.Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT 
emp.FirstName, emp.LastName, 
cust.FirstName, cust.LastName, 
inv.Total,  
cust.Country
FROM chinook.invoices as inv
JOIN chinook.customers as cust
on cust.CustomerId = inv.CustomerId
JOIN chinook.employees as emp
on emp.EmployeeId = cust.SupportRepId;

#8.How many Invoices were there in 2009?
SELECT count(invoicedate)
FROM chinook.invoices
WHERE invoicedate LIKE '2009%'

#9.What are the total sales for 2009?
SELECT sum(total)
FROM chinook.invoices
WHERE invoicedate LIKE '2009%'

#10.Write a query that includes the purchased track name with each invoice line ID.
SELECT 
t.Name, 
i.InvoiceLineID
FROM chinook.invoice_items as i
JOIN chinook.tracks as t
on t.TrackId = i.TrackId;

#11.Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT 
t.Name as Track, 
art.Name as Artist, 
i.InvoiceLineID
FROM chinook.invoice_items as i
JOIN chinook.tracks as t
on t.TrackId = i.TrackId
JOIN chinook.albums as al
on al.AlbumId = t.AlbumId
JOIN chinook.artists as art
on art.ArtistId = al.ArtistId;

#12.Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT 
t.Name as Track, 
al.Title as Album, 
m.Name as Media_Type, 
g.Name as Genre
FROM chinook.tracks as t
JOIN chinook.albums as al
on t.AlbumId = al.AlbumId
JOIN chinook.media_types as m
on t.MediaTypeId = m.MediaTypeId
JOIN chinook.genres as g
on g.GenreId = t.GenreId;

#13.Show the total sales made by each sales agent.
SELECT 
emp.FirstName, 
emp.LastName,
ROUND(sum(inv.Total),2) as 'Total Sales'
FROM chinook.invoices as inv
JOIN chinook.customers as cust
on cust.CustomerId = inv.CustomerId
JOIN chinook.employees as emp
on emp.EmployeeId = cust.SupportRepId
GROUP BY emp.EmployeeId;

#14.Which sales agent made the most dollars in sales in 2009?
SELECT 
emp.FirstName, 
emp.LastName,
ROUND(sum(inv.Total),2) as 'Total Sales'
FROM chinook.invoices as inv
JOIN chinook.customers as cust
on cust.CustomerId = inv.CustomerId
JOIN chinook.employees as emp
on emp.EmployeeId = cust.SupportRepId
WHERE inv.InvoiceDate LIKE '2009%'
GROUP BY emp.EmployeeId
ORDER BY ROUND(sum(inv.Total),2) desc
LIMIT 1;

#15. Show all the tracks in playlist 1.
SELECT 
t.TrackId, 
t.Name, 
t.Composer
FROM chinook.playlist_track as pt
LEFT JOIN chinook.tracks as t
on pt.TrackId = t.TrackId
WHERE pt.PlaylistId = 1;

#16. Which album has had the most sales?
SELECT 
al.AlbumId, 
al.Title, ROUND(sum((ii.unitprice*quantity)),2) as total_sales
FROM chinook.albums as al
LEFT JOIN chinook.tracks as t
on al.AlbumId = t.AlbumId
RIGHT JOIN chinook.invoice_items as ii
on t.TrackId = ii.TrackId
GROUP BY al.albumid
ORDER BY total_sales desc
LIMIT 1;



